name: Build, Push to ECR, and Deploy to Lambda

# This section defines the events that will trigger the workflow.
# In this case, the workflow runs on any push to the 'main' branch
# and specifically when changes are made to the app.yaml file or any file within the 'app' directory.
on:
  push:
    branches:
      - 'main'
    paths:
      - .github/workflows/app.yaml
      - 'app/**'

# Environment variables that are used throughout the workflow.
# These variables are defined in GitHub repository settings under "Secrets and variables" and "Actions" sections.
env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_HOST: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com
  ECR_REPOSITORY: my-ecr
  LAMBDA_FUNCTION_NAME: my-lambda-function

jobs:
  build-and-deploy:
    # The runner on which the job will execute.
    runs-on: ubuntu-latest

    steps:
      # The first step checks out the repository code so that subsequent steps can access it.
      - name: Checkout code
        uses: actions/checkout@v4

      # This step configures the AWS credentials needed for the workflow to interact with AWS services.
      # The AWS access key and secret access key are securely stored in GitHub secrets.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      # This step logs into the Amazon ECR (Elastic Container Registry) service.
      # It retrieves a login password and uses it to authenticate Docker to the ECR repository.
      - name: Login to Amazon ECR
        id: ecr-login
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_HOST }}/${{ env.ECR_REPOSITORY }}

      # This step builds the Docker image from the Dockerfile in the repository.
      # The image is tagged with the ECR repository name.
      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }} .
          docker tag ${{ env.ECR_REPOSITORY }}:latest ${{ env.ECR_HOST }}/${{ env.ECR_REPOSITORY }}:latest

      # This step pushes the Docker image to the ECR repository.
      # The 'latest' tag is used to indicate the most recent version of the image.
      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.ECR_HOST }}/${{ env.ECR_REPOSITORY }}:latest

      # This final step updates the AWS Lambda function to use the new Docker image.
      # The Lambda function is updated with the URI of the latest image in the ECR repository.
      - name: Update Lambda function
        run: |
          aws lambda update-function-code --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --image-uri ${{ env.ECR_HOST }}/${{ env.ECR_REPOSITORY }}:latest

# This GitHub Actions workflow is designed to automate the process of building a Docker image,
# pushing it to an Amazon ECR repository, and updating an AWS Lambda function to use the new image.
